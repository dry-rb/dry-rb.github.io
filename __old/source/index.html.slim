---
title: Home
---

.row
  .content-wrap
    .home-taster
      p.home-taster__intro Check out the examples below to get a taste for how our libraries work
      .home-taster__code
        .taster#eg-validation
          .taster__header
            h3
              a href="/gems/dry-validation/1.0" dry-validation
            a.taster__link href="/gems/dry-validation/1.0" View docs
          .taster__content
            .taster__summary
              markdown:
                Use schemas and powerful rules to validate data with explicitness, clarity and precision.
            .taster__example
              markdown:
                ```ruby
                class NewUserContract < Dry::Validation::Contract
                  params do
                    required(:name).filled(:string)
                    required(:age).filled(:integer)
                  end

                  rule(:age) { key.failure("must be greater than 18") if value < 18 }
                end

                contract = NewUserContract.new

                contract.("name" => "Jane", "age" => "30").success?
                # => true

                contract.("name" => "Jane", "age" => "17").failure?
                # => true
                contract.("name" => "Jane", "age" => "17").errors.to_h
                # => {:age=>["must be greater than 18"]}
                ```

        .taster#eg-types
          .taster__header
            h3
              a href="/gems/dry-types" dry-types
            a.taster__link href="/gems/dry-types" View docs
          .taster__content
            .taster__summary
              markdown:
                Build your own strict data types, constraints and coercions with dry-types.
            .taster__example
              markdown:
                ```ruby
                module Types
                  include Dry::Types.module

                  Greeting = Strict::String.enum("Hello", "Hola")
                end

                Types::Greeting["Hello"]
                # => "Hello"

                Types::Greeting["Goodbye"]
                # Dry::Types::ConstraintError: "Goodbye" violates constraints...
                ```
              p.code-caption Define types with constraints

              markdown:
                ```ruby
                class Person < Dry::Struct
                  attribute :name, Types::Strict::String
                  attribute :age, Types::Strict::Integer
                end

                Person.new(name: "Jane", age: 30)
                # => #<Person name="Jane" age=30>
                ```
              p.code-caption Define strictly typed structs

        .taster#eg-dependency-management
          .taster__header
            h3
              ' Dependency management
          .taster__content
            .taster__summary
              markdown:
                Use [dry-system](/gems/dry-system) to build your application from a collection of discrete, single-purpose components. Compose these objects and easily achieve larger functionality with [auto-injection](/gems/dry-auto_inject).
            .taster__example
              markdown:
                ```ruby
                class App < Dry::System::Container
                  configure do |config|
                    config.auto_register = %w[lib]
                  end

                  load_paths! "lib"
                end
                ```
              p.code-caption Manage your appâ€™s objects in a system

              markdown:
                ```ruby
                require "app/import"

                class CreateArticle
                  include App::Import[repo: "repositories.articles"]

                  def call(input)
                    # Work with the injected dependency
                    repo.create(input)
                  end
                end
                ```
              p.code-caption Build callable functional objects with automatic dependency resolution

        .taster#eg-monads-patterns
          .taster__header
            h3
              a href="/gems/dry-system" Monads & pattern matching
          .taster__content
            .taster__summary
              markdown:
                Safely and gracefully model complex transformations with [monads](/gems/dry-monads), and use [pattern matching](/gems/dry-matcher) to make robust error handling a first-class feature of your application.
            .taster__example
              markdown:
                ```ruby
                Dry::Monads::Maybe(user).fmap(&:address).fmap(&:street)

                # If user with address exists
                # => Some("Street Address")
                # If user or address is nil
                # => None()
                ```
              p.code-caption Safely model complex, chained transformations

              markdown:
                ```ruby
                class CreateArticle
                  include Dry::Monads::Result::Mixin
                  include Dry::Matcher.for(:call, with: Dry::Matcher::ResultMatcher)

                  def call(input)
                    if success?(input)
                      output = some_action(input)
                      Success(output)
                    else
                      Failure(input)
                    end
                  end
                end

                create = CreateArticle.new
                create.(input) do |m|
                  m.success do |output|
                    # Handle success
                  end

                  m.failure do |err|
                    # Handle failure
                  end
                end
                ```
              p.code-caption Use the Result monad to model success and failure and match on the result
